// Temporarily disabled middleware due to missing Supabase dependencies
// TODO: Re-enable when Supabase packages are properly installed

// import { createServerClient, type CookieOptions } from '@supabase/ssr'
// import { NextResponse, type NextRequest } from 'next/server'

// export async function middleware(request: NextRequest) {
//   let response = NextResponse.next({
//     request: {
//       headers: request.headers,
//     },
//   })

//   const supabase = createServerClient(
//     process.env.NEXT_PUBLIC_SUPABASE_URL!,
//     process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
//     {
//       cookies: {
//         get(name: string) {
//           return request.cookies.get(name)?.value
//         },
//         set(name: string, value: string, options: CookieOptions) {
//           response.cookies.set({
//             name,
//             value,
//             ...options,
//           })
//         },
//         remove(name: string, options: CookieOptions) {
//           response.cookies.set({
//             name,
//             value: '',
//             ...options,
//           })
//         },
//       },
//     }
//   )

//   const {
//     data: { user },
//   } = await supabase.auth.getUser()

//   const publicPaths = ['/login', '/register', '/auth/callback', '/features', '/pricing'];
//   const isRootPath = request.nextUrl.pathname === '/';
//   const isPublicPath = isRootPath || publicPaths.some(path => request.nextUrl.pathname.startsWith(path));
//   const isProtectedRoute = request.nextUrl.pathname.startsWith('/dashboard');

//   // if user is signed in and trying to access a public path (like login), redirect to dashboard
//   if (user && isPublicPath && request.nextUrl.pathname !== '/') {
//     return NextResponse.redirect(new URL('/dashboard', request.url))
//   }

//   // if user is not signed in and trying to access a protected route, redirect to login
//   if (!user && isProtectedRoute) {
//     return NextResponse.redirect(new URL('/login', request.url))
//   }

//   return response
// }

// export const config = {
//   matcher: ['/((?!api|_next/static|_next/image|favicon.ico).*)'],
// }
